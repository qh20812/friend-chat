// ===== SHOP MODULE =====

model Product {
  id          String        @id @default(cuid())
  sellerId    String
  name        String
  description String?       @db.Text
  price       Decimal       @db.Decimal(10, 2)
  category    String?
  condition   ProductCondition @default(NEW)
  isAvailable Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  orderItems  OrderItem[]
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int     @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model Order {
  id        String      @id @default(cuid())
  buyerId   String
  sellerId  String
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  buyer     User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([orderId, productId])
  @@map("order_items")
}

// Enums for this module
enum ProductCondition {
  NEW
  USED
  REFURBISHED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
