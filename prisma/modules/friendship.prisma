// ===== FRIENDSHIP MODULE =====

model FriendRequest {
  id          String            @id @default(cuid())
  senderId    String
  receiverId  String
  status      FriendRequestStatus @default(PENDING)
  message     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  sender      User              @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User              @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("friend_requests")
}

model Friendship {
  id          String    @id @default(cuid())
  userId      String
  friendId    String
  category    String?   // "family", "work", "close_friends", etc.
  createdAt   DateTime  @default(now())
  
  user        User      @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend      User      @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@map("friendships")
}

model BlockedUser {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())
  
  blocker   User     @relation("BlockedBy", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([blockerId, blockedId])
  @@map("blocked_users")
}

// Enums for this module
enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
